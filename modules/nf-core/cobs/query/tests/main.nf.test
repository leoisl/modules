nextflow_process {
    name "Test Process COBS_QUERY"
    script "../main.nf"
    process "COBS_QUERY"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "cobs"
    tag "cobs/query"
    tag "xz/compress"
    tag "cobs/classicconstruct"
    tag "pigz/compress"
    tag "cobs/compactconstruct"

    test("sarscov2 - classic - no compression - reads - fastq") {
        setup {
            run("COBS_CLASSICCONSTRUCT") {
                script "../../classicconstruct/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'], // meta map
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map,
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = COBS_CLASSICCONSTRUCT.out.index
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("consistent_output")}
            )
        }
    }

    test("sarscov2 - compact - no compression - reads - fastq") {
        setup {
            run("COBS_COMPACTCONSTRUCT") {
                script "../../compactconstruct/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'], // meta map
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map,
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = COBS_COMPACTCONSTRUCT.out.index
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("consistent_output")}
            )
        }
    }

    test("sarscov2 - classic - xz compression - reads - fastq") {
        setup {
            run("COBS_CLASSICCONSTRUCT") {
                script "../../classicconstruct/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'], // meta map
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
            run("XZ_COMPRESS") {
                script "../../../xz/compress/main.nf"
                process {
                    """
                    input[0] = COBS_CLASSICCONSTRUCT.out.index
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map,
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = XZ_COMPRESS.out.archive
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("consistent_output")}
            )
        }
    }

    test("sarscov2 - compact - xz compression - reads - fastq") {
        setup {
            run("COBS_COMPACTCONSTRUCT") {
                script "../../compactconstruct/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'], // meta map
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
            run("XZ_COMPRESS") {
                script "../../../xz/compress/main.nf"
                process {
                    """
                    input[0] = COBS_COMPACTCONSTRUCT.out.index
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map,
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = XZ_COMPRESS.out.archive
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("consistent_output")}
            )
        }
    }

    test("sarscov2 - classic with load complete - xz compression - reads - fastq") {
        config "./nextflow.load_complete.config"
        setup {
            run("COBS_CLASSICCONSTRUCT") {
                script "../../classicconstruct/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'], // meta map
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
            run("XZ_COMPRESS") {
                script "../../../xz/compress/main.nf"
                process {
                    """
                    input[0] = COBS_CLASSICCONSTRUCT.out.index
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map,
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = XZ_COMPRESS.out.archive
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("consistent_output")}
            )
        }
    }

    test("sarscov2 - classic - gz compression - reads - fastq") {
        setup {
            run("COBS_CLASSICCONSTRUCT") {
                script "../../classicconstruct/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'], // meta map
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
            run("PIGZ_COMPRESS") {
                script "../../../pigz/compress/main.nf"
                process {
                    """
                    input[0] = COBS_CLASSICCONSTRUCT.out.index
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map,
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = PIGZ_COMPRESS.out.archive
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("consistent_output")}
            )
        }
    }

    test("sarscov2 - compact - gz compression - reads - fastq") {
        setup {
            run("COBS_COMPACTCONSTRUCT") {
                script "../../compactconstruct/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'], // meta map
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
            run("PIGZ_COMPRESS") {
                script "../../../pigz/compress/main.nf"
                process {
                    """
                    input[0] = COBS_COMPACTCONSTRUCT.out.index
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map,
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = PIGZ_COMPRESS.out.archive
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("consistent_output")}
            )
        }
    }

    test("sarscov2 - classic with load complete - gz compression - reads - fastq") {
        config "./nextflow.load_complete.config"
        setup {
            run("COBS_CLASSICCONSTRUCT") {
                script "../../classicconstruct/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test'], // meta map
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }
            run("PIGZ_COMPRESS") {
                script "../../../pigz/compress/main.nf"
                process {
                    """
                    input[0] = COBS_CLASSICCONSTRUCT.out.index
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map,
                    file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                ]
                input[1] = PIGZ_COMPRESS.out.archive
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("consistent_output")}
            )
        }
    }

    test("sarscov2 - classic - no compression - reads - fastq - stub") {
        options "-stub-run"
        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map,
                    file('reads.fastq.gz')
                ]
                input[1] = [
                    [ id:'test'], // meta map
                    file('test.index.cobs_classic')
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match()}
            )
        }
    }
}
